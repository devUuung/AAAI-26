# CMAKE generated file: DO NOT EDIT!
# Generated by CMake Version 4.0

# BINFHE_EXAMPLES_SRC_FILES at src/binfhe/CMakeLists.txt:75 (file)
file(GLOB NEW_GLOB LIST_DIRECTORIES true "/opt/openfhe-gpu/src/binfhe/examples/*.cpp")
set(OLD_GLOB
  "/opt/openfhe-gpu/src/binfhe/examples/boolean-ap.cpp"
  "/opt/openfhe-gpu/src/binfhe/examples/boolean-lmkcdey.cpp"
  "/opt/openfhe-gpu/src/binfhe/examples/boolean-multi-input.cpp"
  "/opt/openfhe-gpu/src/binfhe/examples/boolean-serial-binary-dynamic-large-precision.cpp"
  "/opt/openfhe-gpu/src/binfhe/examples/boolean-serial-binary.cpp"
  "/opt/openfhe-gpu/src/binfhe/examples/boolean-serial-json-dynamic-large-precision.cpp"
  "/opt/openfhe-gpu/src/binfhe/examples/boolean-serial-json.cpp"
  "/opt/openfhe-gpu/src/binfhe/examples/boolean-truth-tables.cpp"
  "/opt/openfhe-gpu/src/binfhe/examples/boolean.cpp"
  "/opt/openfhe-gpu/src/binfhe/examples/eval-decomp.cpp"
  "/opt/openfhe-gpu/src/binfhe/examples/eval-flooring.cpp"
  "/opt/openfhe-gpu/src/binfhe/examples/eval-function.cpp"
  "/opt/openfhe-gpu/src/binfhe/examples/eval-sign.cpp"
  )
if(NOT "${NEW_GLOB}" STREQUAL "${OLD_GLOB}")
  message("-- GLOB mismatch!")
  file(TOUCH_NOCREATE "/opt/openfhe-gpu/build/CMakeFiles/cmake.verify_globs")
endif()

# BINFHE_EXAMPLES_SRC_FILES at src/binfhe/CMakeLists.txt:84 (file)
file(GLOB NEW_GLOB LIST_DIRECTORIES true "/opt/openfhe-gpu/src/binfhe/examples/pke/*.cpp")
set(OLD_GLOB
  "/opt/openfhe-gpu/src/binfhe/examples/pke/boolean-ap-pke.cpp"
  "/opt/openfhe-gpu/src/binfhe/examples/pke/boolean-pke.cpp"
  "/opt/openfhe-gpu/src/binfhe/examples/pke/boolean-serial-binary-pke.cpp"
  "/opt/openfhe-gpu/src/binfhe/examples/pke/boolean-serial-json-pke.cpp"
  "/opt/openfhe-gpu/src/binfhe/examples/pke/boolean-truth-tables-pke.cpp"
  "/opt/openfhe-gpu/src/binfhe/examples/pke/eval-flooring-pke.cpp"
  "/opt/openfhe-gpu/src/binfhe/examples/pke/eval-function-pke.cpp"
  )
if(NOT "${NEW_GLOB}" STREQUAL "${OLD_GLOB}")
  message("-- GLOB mismatch!")
  file(TOUCH_NOCREATE "/opt/openfhe-gpu/build/CMakeFiles/cmake.verify_globs")
endif()

# BINFHE_SRC_FILES at src/binfhe/CMakeLists.txt:6 (file)
file(GLOB NEW_GLOB LIST_DIRECTORIES true "/opt/openfhe-gpu/src/binfhe/lib/*.cpp")
set(OLD_GLOB
  "/opt/openfhe-gpu/src/binfhe/lib/binfhe-base-scheme.cpp"
  "/opt/openfhe-gpu/src/binfhe/lib/binfhe-constants-impl.cpp"
  "/opt/openfhe-gpu/src/binfhe/lib/binfhecontext.cpp"
  "/opt/openfhe-gpu/src/binfhe/lib/lwe-pke.cpp"
  "/opt/openfhe-gpu/src/binfhe/lib/rgsw-acc-cggi.cpp"
  "/opt/openfhe-gpu/src/binfhe/lib/rgsw-acc-dm.cpp"
  "/opt/openfhe-gpu/src/binfhe/lib/rgsw-acc-lmkcdey.cpp"
  "/opt/openfhe-gpu/src/binfhe/lib/rgsw-acc.cpp"
  "/opt/openfhe-gpu/src/binfhe/lib/rgsw-cryptoparameters.cpp"
  )
if(NOT "${NEW_GLOB}" STREQUAL "${OLD_GLOB}")
  message("-- GLOB mismatch!")
  file(TOUCH_NOCREATE "/opt/openfhe-gpu/build/CMakeFiles/cmake.verify_globs")
endif()

# CORE_EXAMPLES_SRC_FILES at src/core/CMakeLists.txt:85 (file)
file(GLOB NEW_GLOB LIST_DIRECTORIES true "/opt/openfhe-gpu/src/core/examples/*.cpp")
set(OLD_GLOB
  "/opt/openfhe-gpu/src/core/examples/Benchmark.cpp"
  "/opt/openfhe-gpu/src/core/examples/FusionTest.cpp"
  "/opt/openfhe-gpu/src/core/examples/ntt_test.cpp"
  "/opt/openfhe-gpu/src/core/examples/parallel.cpp"
  "/opt/openfhe-gpu/src/core/examples/sampling.cpp"
  "/opt/openfhe-gpu/src/core/examples/vector_add_demo.cpp"
  )
if(NOT "${NEW_GLOB}" STREQUAL "${OLD_GLOB}")
  message("-- GLOB mismatch!")
  file(TOUCH_NOCREATE "/opt/openfhe-gpu/build/CMakeFiles/cmake.verify_globs")
endif()

# PKE_EXAMPLES_SRC_FILES at src/pke/CMakeLists.txt:92 (file)
file(GLOB NEW_GLOB LIST_DIRECTORIES true "/opt/openfhe-gpu/src/pke/examples/*.cpp")
set(OLD_GLOB
  "/opt/openfhe-gpu/src/pke/examples/advanced-ckks-bootstrapping-gpu.cpp"
  "/opt/openfhe-gpu/src/pke/examples/advanced-ckks-bootstrapping.cpp"
  "/opt/openfhe-gpu/src/pke/examples/advanced-real-numbers-128.cpp"
  "/opt/openfhe-gpu/src/pke/examples/advanced-real-numbers.cpp"
  "/opt/openfhe-gpu/src/pke/examples/basic-ckks.cpp"
  "/opt/openfhe-gpu/src/pke/examples/ckks-gpu-bookkeeping.cpp"
  "/opt/openfhe-gpu/src/pke/examples/ckks-gpu-keyswitch.cpp"
  "/opt/openfhe-gpu/src/pke/examples/ckks-noise-flooding.cpp"
  "/opt/openfhe-gpu/src/pke/examples/depth-bfvrns-behz.cpp"
  "/opt/openfhe-gpu/src/pke/examples/depth-bfvrns.cpp"
  "/opt/openfhe-gpu/src/pke/examples/depth-bgvrns.cpp"
  "/opt/openfhe-gpu/src/pke/examples/function-evaluation.cpp"
  "/opt/openfhe-gpu/src/pke/examples/inner-product.cpp"
  "/opt/openfhe-gpu/src/pke/examples/iterative-ckks-bootstrapping.cpp"
  "/opt/openfhe-gpu/src/pke/examples/linearwsum-evaluation.cpp"
  "/opt/openfhe-gpu/src/pke/examples/polynomial-evaluation.cpp"
  "/opt/openfhe-gpu/src/pke/examples/pre-buffer.cpp"
  "/opt/openfhe-gpu/src/pke/examples/pre-hra-secure.cpp"
  "/opt/openfhe-gpu/src/pke/examples/rotation.cpp"
  "/opt/openfhe-gpu/src/pke/examples/scheme-switching-serial.cpp"
  "/opt/openfhe-gpu/src/pke/examples/scheme-switching.cpp"
  "/opt/openfhe-gpu/src/pke/examples/simple-ckks-bootstrapping.cpp"
  "/opt/openfhe-gpu/src/pke/examples/simple-integers-bgvrns.cpp"
  "/opt/openfhe-gpu/src/pke/examples/simple-integers-serial-bgvrns.cpp"
  "/opt/openfhe-gpu/src/pke/examples/simple-integers-serial.cpp"
  "/opt/openfhe-gpu/src/pke/examples/simple-integers.cpp"
  "/opt/openfhe-gpu/src/pke/examples/simple-real-numbers-serial.cpp"
  "/opt/openfhe-gpu/src/pke/examples/simple-real-numbers.cpp"
  "/opt/openfhe-gpu/src/pke/examples/tckks-interactive-mp-bootstrapping-Chebyshev.cpp"
  "/opt/openfhe-gpu/src/pke/examples/tckks-interactive-mp-bootstrapping.cpp"
  "/opt/openfhe-gpu/src/pke/examples/threshold-fhe-5p.cpp"
  "/opt/openfhe-gpu/src/pke/examples/threshold-fhe.cpp"
  )
if(NOT "${NEW_GLOB}" STREQUAL "${OLD_GLOB}")
  message("-- GLOB mismatch!")
  file(TOUCH_NOCREATE "/opt/openfhe-gpu/build/CMakeFiles/cmake.verify_globs")
endif()

# CORE_SRC_FILES at src/core/CMakeLists.txt:6 (file)
file(GLOB_RECURSE NEW_GLOB LIST_DIRECTORIES false "/opt/openfhe-gpu/src/core/lib/*.c")
set(OLD_GLOB
  "/opt/openfhe-gpu/src/core/lib/utils/prng/blake2b-ref.c"
  "/opt/openfhe-gpu/src/core/lib/utils/prng/blake2xb-ref.c"
  )
if(NOT "${NEW_GLOB}" STREQUAL "${OLD_GLOB}")
  message("-- GLOB mismatch!")
  file(TOUCH_NOCREATE "/opt/openfhe-gpu/build/CMakeFiles/cmake.verify_globs")
endif()

# CORE_SRC_FILES at src/core/CMakeLists.txt:6 (file)
file(GLOB_RECURSE NEW_GLOB LIST_DIRECTORIES false "/opt/openfhe-gpu/src/core/lib/*.cpp")
set(OLD_GLOB
  "/opt/openfhe-gpu/src/core/lib/lattice/constants-lattice-impl.cpp"
  "/opt/openfhe-gpu/src/core/lib/lattice/lattice.cpp"
  "/opt/openfhe-gpu/src/core/lib/lattice/stdlatticeparms.cpp"
  "/opt/openfhe-gpu/src/core/lib/lattice/trapdoor-dcrtpoly.cpp"
  "/opt/openfhe-gpu/src/core/lib/lattice/trapdoor-poly.cpp"
  "/opt/openfhe-gpu/src/core/lib/math/chebyshev.cpp"
  "/opt/openfhe-gpu/src/core/lib/math/dftransform.cpp"
  "/opt/openfhe-gpu/src/core/lib/math/discretegaussiangeneratorgeneric.cpp"
  "/opt/openfhe-gpu/src/core/lib/math/distributiongenerator.cpp"
  "/opt/openfhe-gpu/src/core/lib/math/hal/bigintdyn/be4-math-impl.cpp"
  "/opt/openfhe-gpu/src/core/lib/math/hal/bigintdyn/mubintvecdyn.cpp"
  "/opt/openfhe-gpu/src/core/lib/math/hal/bigintdyn/ubintdyn.cpp"
  "/opt/openfhe-gpu/src/core/lib/math/hal/bigintfxd/be2-math-impl.cpp"
  "/opt/openfhe-gpu/src/core/lib/math/hal/bigintfxd/mubintvecfxd.cpp"
  "/opt/openfhe-gpu/src/core/lib/math/hal/bigintfxd/ubintfxd.cpp"
  "/opt/openfhe-gpu/src/core/lib/math/hal/bigintntl/be6-math-impl.cpp"
  "/opt/openfhe-gpu/src/core/lib/math/hal/bigintntl/mubintvecntl.cpp"
  "/opt/openfhe-gpu/src/core/lib/math/hal/bigintntl/ubintntl.cpp"
  "/opt/openfhe-gpu/src/core/lib/math/hal/intnat/benative-math-impl.cpp"
  "/opt/openfhe-gpu/src/core/lib/math/hal/intnat/mubintvecnat.cpp"
  "/opt/openfhe-gpu/src/core/lib/math/matrix.cpp"
  "/opt/openfhe-gpu/src/core/lib/math/nbtheory2.cpp"
  "/opt/openfhe-gpu/src/core/lib/utils/blockAllocator/blockAllocator.cpp"
  "/opt/openfhe-gpu/src/core/lib/utils/blockAllocator/xallocator.cpp"
  "/opt/openfhe-gpu/src/core/lib/utils/debug.cpp"
  "/opt/openfhe-gpu/src/core/lib/utils/demangle.cpp"
  "/opt/openfhe-gpu/src/core/lib/utils/get-call-stack.cpp"
  "/opt/openfhe-gpu/src/core/lib/utils/hashutil.cpp"
  "/opt/openfhe-gpu/src/core/lib/utils/inttypes.cpp"
  "/opt/openfhe-gpu/src/core/lib/utils/openfhebase64.cpp"
  "/opt/openfhe-gpu/src/core/lib/utils/parallel.cpp"
  "/opt/openfhe-gpu/src/core/lib/utils/utilities.cpp"
  )
if(NOT "${NEW_GLOB}" STREQUAL "${OLD_GLOB}")
  message("-- GLOB mismatch!")
  file(TOUCH_NOCREATE "/opt/openfhe-gpu/build/CMakeFiles/cmake.verify_globs")
endif()

# CORE_CUDA_FILES at CMakeLists.txt:691 (file)
file(GLOB_RECURSE NEW_GLOB LIST_DIRECTORIES false "/opt/openfhe-gpu/src/core/lib/gpu/*.cu")
set(OLD_GLOB
  "/opt/openfhe-gpu/src/core/lib/gpu/Context.cu"
  "/opt/openfhe-gpu/src/core/lib/gpu/CudaHelper.cu"
  "/opt/openfhe-gpu/src/core/lib/gpu/DeviceVector.cu"
  "/opt/openfhe-gpu/src/core/lib/gpu/MultPtxtBatch.cu"
  "/opt/openfhe-gpu/src/core/lib/gpu/NttImple.cu"
  "/opt/openfhe-gpu/src/core/lib/gpu/vector_add_kernel.cu"
  )
if(NOT "${NEW_GLOB}" STREQUAL "${OLD_GLOB}")
  message("-- GLOB mismatch!")
  file(TOUCH_NOCREATE "/opt/openfhe-gpu/build/CMakeFiles/cmake.verify_globs")
endif()

# CORE_SRC_FILES at src/core/CMakeLists.txt:6 (file)
file(GLOB_RECURSE NEW_GLOB LIST_DIRECTORIES false "/opt/openfhe-gpu/src/core/lib/utils/*.cpp")
set(OLD_GLOB
  "/opt/openfhe-gpu/src/core/lib/utils/blockAllocator/blockAllocator.cpp"
  "/opt/openfhe-gpu/src/core/lib/utils/blockAllocator/xallocator.cpp"
  "/opt/openfhe-gpu/src/core/lib/utils/debug.cpp"
  "/opt/openfhe-gpu/src/core/lib/utils/demangle.cpp"
  "/opt/openfhe-gpu/src/core/lib/utils/get-call-stack.cpp"
  "/opt/openfhe-gpu/src/core/lib/utils/hashutil.cpp"
  "/opt/openfhe-gpu/src/core/lib/utils/inttypes.cpp"
  "/opt/openfhe-gpu/src/core/lib/utils/openfhebase64.cpp"
  "/opt/openfhe-gpu/src/core/lib/utils/parallel.cpp"
  "/opt/openfhe-gpu/src/core/lib/utils/utilities.cpp"
  )
if(NOT "${NEW_GLOB}" STREQUAL "${OLD_GLOB}")
  message("-- GLOB mismatch!")
  file(TOUCH_NOCREATE "/opt/openfhe-gpu/build/CMakeFiles/cmake.verify_globs")
endif()

# PKE_SRC_FILES at src/pke/CMakeLists.txt:6 (file)
file(GLOB_RECURSE NEW_GLOB LIST_DIRECTORIES false "/opt/openfhe-gpu/src/pke/lib/*.cpp")
set(OLD_GLOB
  "/opt/openfhe-gpu/src/pke/lib/ciphertext-impl.cpp"
  "/opt/openfhe-gpu/src/pke/lib/constants-impl.cpp"
  "/opt/openfhe-gpu/src/pke/lib/cryptocontext.cpp"
  "/opt/openfhe-gpu/src/pke/lib/cryptocontextfactory.cpp"
  "/opt/openfhe-gpu/src/pke/lib/cryptoobject-impl.cpp"
  "/opt/openfhe-gpu/src/pke/lib/encoding/ckkspackedencoding.cpp"
  "/opt/openfhe-gpu/src/pke/lib/encoding/coefpackedencoding.cpp"
  "/opt/openfhe-gpu/src/pke/lib/encoding/encodingparams.cpp"
  "/opt/openfhe-gpu/src/pke/lib/encoding/packedencoding.cpp"
  "/opt/openfhe-gpu/src/pke/lib/encoding/stringencoding.cpp"
  "/opt/openfhe-gpu/src/pke/lib/globals-impl.cpp"
  "/opt/openfhe-gpu/src/pke/lib/key/evalkey.cpp"
  "/opt/openfhe-gpu/src/pke/lib/key/evalkeyrelin.cpp"
  "/opt/openfhe-gpu/src/pke/lib/key/privatekey.cpp"
  "/opt/openfhe-gpu/src/pke/lib/key/publickey.cpp"
  "/opt/openfhe-gpu/src/pke/lib/keyswitch/keyswitch-base.cpp"
  "/opt/openfhe-gpu/src/pke/lib/keyswitch/keyswitch-bv.cpp"
  "/opt/openfhe-gpu/src/pke/lib/keyswitch/keyswitch-hybrid.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/bfvrns/bfvrns-cryptoparameters.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/bfvrns/bfvrns-leveledshe.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/bfvrns/bfvrns-multiparty.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/bfvrns/bfvrns-parametergeneration.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/bfvrns/bfvrns-pke.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/bfvrns/bfvrns-scheme.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/bgvrns/bgvrns-cryptoparameters.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/bgvrns/bgvrns-leveledshe.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/bgvrns/bgvrns-multiparty.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/bgvrns/bgvrns-parametergeneration.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/bgvrns/bgvrns-pke.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/bgvrns/bgvrns-scheme.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/ckksrns/ckksrns-advancedshe-gpu.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/ckksrns/ckksrns-advancedshe.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/ckksrns/ckksrns-cryptoparameters.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/ckksrns/ckksrns-fhe-gpu.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/ckksrns/ckksrns-fhe.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/ckksrns/ckksrns-leveledshe.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/ckksrns/ckksrns-multiparty.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/ckksrns/ckksrns-parametergeneration.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/ckksrns/ckksrns-pke.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/ckksrns/ckksrns-scheme.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/ckksrns/ckksrns-schemeswitching.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/ckksrns/ckksrns-utils.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/ckksrns/schemeswitching-data-serializer.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/gen-cryptocontext-params-impl.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/gen-cryptocontext-params-validation.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/scheme-id-impl.cpp"
  "/opt/openfhe-gpu/src/pke/lib/scheme/scheme-swch-params.cpp"
  "/opt/openfhe-gpu/src/pke/lib/schemebase/base-advancedshe.cpp"
  "/opt/openfhe-gpu/src/pke/lib/schemebase/base-cryptoparameters.cpp"
  "/opt/openfhe-gpu/src/pke/lib/schemebase/base-fhe.cpp"
  "/opt/openfhe-gpu/src/pke/lib/schemebase/base-leveledshe.cpp"
  "/opt/openfhe-gpu/src/pke/lib/schemebase/base-multiparty.cpp"
  "/opt/openfhe-gpu/src/pke/lib/schemebase/base-parametergeneration.cpp"
  "/opt/openfhe-gpu/src/pke/lib/schemebase/base-pke.cpp"
  "/opt/openfhe-gpu/src/pke/lib/schemebase/base-pre.cpp"
  "/opt/openfhe-gpu/src/pke/lib/schemebase/base-scheme.cpp"
  "/opt/openfhe-gpu/src/pke/lib/schemebase/rlwe-cryptoparameters-impl.cpp"
  "/opt/openfhe-gpu/src/pke/lib/schemerns/rns-cryptoparameters.cpp"
  "/opt/openfhe-gpu/src/pke/lib/schemerns/rns-leveledshe.cpp"
  "/opt/openfhe-gpu/src/pke/lib/schemerns/rns-multiparty.cpp"
  "/opt/openfhe-gpu/src/pke/lib/schemerns/rns-pke.cpp"
  )
if(NOT "${NEW_GLOB}" STREQUAL "${OLD_GLOB}")
  message("-- GLOB mismatch!")
  file(TOUCH_NOCREATE "/opt/openfhe-gpu/build/CMakeFiles/cmake.verify_globs")
endif()
